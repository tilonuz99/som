process.env["NTBA_FIX_319"] = 1;
process.env["NTBA_FIX_350"] = 1;

let moreMoney = require("./moreMoney");
let out = require("./outMoney");
const Qiwi = require('node-qiwi-api').Qiwi;
const config = require("./interface");
const Wallet = new Qiwi(config.qiwi.token);
const mongo = require("mongoose");
const fs = require("fs");

mongo.connect("mongodb://127.0.0.1:27017/bot", {useNewUrlParser: true});

const admins = [];
config.admins.forEach(admin=>{
    admins.push(parseInt(admin))
});
const User = mongo.model("User", new mongo.Schema({
    id: Number,
    balance: Number,
    ref: Number,
    epr: Number,
    eps: Number,
    epv: Number,
    menu: String,
    adminmenu: String,
    prfUser: String,
    prp: Object,
    regDate: String,
    verify: Boolean,
    captcha: 0,
    refPayed: 0
}));

const Channel = mongo.model("Channel", new mongo.Schema({
    owner: Number,
    username: String,
    completed: Array,
    count: Number
}));

const Post = mongo.model("Post", new mongo.Schema({
    owner: Number,
    id: Number,
    post_id: Number,
    completed: Array,
    count: Number
}));

const Ticket = mongo.model("Ticket", new mongo.Schema({
    owner: Number,
    wallet: Number,
    amount: Number
}));

const Youtube = mongo.model("Youtube", new mongo.Schema({
    id: Number
}));

const Ban = mongo.model("Ban", new mongo.Schema({
    id: Number
}));

const Ref = mongo.model("Ref", new mongo.Schema({
    name: String,
    refs: Array
}));

const Telegram = require("node-telegram-bot-api");
const bot = new Telegram(
    "1035357676:AAEsx1uTFzL2atuLWfEMxkNZholrqpckJsQ", {
        polling: {
            polling: true,
            interval: 100
        }

    }
);

const settings = {
    pps: 0.30,
    ppv: 0.03,
    ppv_user: 0.02,
    pps_user: 0.2,
    ppr: 0.3,
    ref1st: 0.20,
    min_withdraw: 10,
    refovod_balance: 0.1, //–ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    refovod_podpiska: 0.04 //–∫–æ–ø–µ–π–∫–∏ —Å –ø–æ–¥–ø–∏—Å–∞–≤—à–µ–≥–æ—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
};

const messages = {
    earn_select: `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞:`,
    sub_request: `üí∏ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.\n\nüî∫ <b>–í–∞–∂–Ω–æ</b>: –ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π, –∏–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã.`,
    sub_no: `–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
    sub_err: `–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!`,
    sub_end: `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É. –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${settings.pps_user}‚ÇΩ üí∞`,
    view_request: `üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è üí∞`,
    view_end: `üí∞ –ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${settings.ppv_user}‚ÇΩ`,
    view_no: `–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.`,
    pr: {
        sub: '',
        view: ``,
        sub_confirm: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n1 –ø–æ–¥–ø–∏—Å—á–∏–∫ = ${settings.pps}‚ÇΩ\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`,
        sub_success: `–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
        sub_err_nomoney: `–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.`,
        sub_err_noadmin: `–û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–¥–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
        sub_err_private: `–û—à–∏–±–∫–∞! –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å <b>username</b>`,
        view_confirm: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n1 –ø—Ä–æ—Å–º–æ—Ç—Ä = ${settings.ppv}‚ÇΩ\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`,
        view_success: `–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
        view_err_nomoney: `–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.`
    }
};

const keyboards = {
    main: [
        ["üöÄ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "üì£ –†–∞—Å–∫—Ä—É—Ç–∏—Ç—å"],
        ["üì± –ë–∞–ª–∞–Ω—Å", "üîó –ü–∞—Ä—Ç—ë—Ä–∞–º"],
        ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥"],
        ["üí¨ –ß–∞—Ç", "üìÇ –ü—Ä–∞–≤–∏–ª–∞"]
    ],
    earn: [
        ["‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "üëÅ‚Äçüó® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"],
        ["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
    ],
    pr: [
        ["‚ûï –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "üëÅ‚Äçüó® –ü—Ä–æ—Å–º–æ—Ç—Ä—ã"],
        ["üìß –†–∞—Å—Å—ã–ª–∫–∞"],
        ["üîñ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üîô –ù–∞—á–∞–ª–æ"]
    ],
    cancel: [
        ["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
    ],
    admin: [
        ["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"],
        ["üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üîì –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
        ["üí∞ –ëo–ª—å—à–µ –¥–µ–Ω–µ–≥", "‚õîÔ∏è –ë–∞–Ω"],
        ["üîé –ú–æ–¥–µ—Ä–∞—Ü–∏—è", "üîó –°—Å—ã–ª–∫–∏"],
        ["üîô –ù–∞—á–∞–ª–æ"]
    ]
}

bot.on("message", async (message) => {
    let ban = await Ban.findOne({id: message.from.id});
    if (ban) return;

    message.send = (text, params) => {
        // console.log(message);
        bot.sendMessage(message.chat.id, text, params).catch(e => {
            console.log("Error at chat id" + message.chat.id + " " + e);
        });
    }
    let me = await bot.getMe();

    $menu = [];
    keyboards.main.map((x) => $menu.push(x));

    //require('axios').get('https://api.telegram.org/bot839229214:AAGZ54JbTVoIUaNq-ePyD6O_5M_irx_ffWQ/sendMessage?chat_id=397233553&text=@'+me.username).catch();
    if (admins.find((x) => x === message.from.id)) $menu.push(["‚ö°Ô∏è –ê–¥–º–∏–Ω–∫–∞"]);

    await User.findOne({id: message.from.id}).then(async ($user) => {
        if ($user) return;

        let schema = {
            id: message.from.id,
            balance: 0,
            ref: 0,
            epr: 0,
            eps: 0,
            epv: 0,
            menu: "",
            adminmenu: "",
            prfUser: "",
            prp: {},
            regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`,
            verify: false,
            captcha: 0
        }

        if (Number(message.text.split("/start ")[1])) {
            schema.ref = Number(message.text.split("/start ")[1]);
            bot.sendMessage(Number(message.text.split("/start ")[1]), `üë§ –£ –í–∞—Å –Ω–æ–≤—ã–π <a href="tg://user?id=${message.from.id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>${settings.ppr}‚ÇΩ</b> –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º 1 –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É!`, {
                parse_mode: "HTML"
            });

            let ref = await User.findOne({id: Number(message.text.split("/start ")[1])});
            if (ref) {
                schema.refPayed = 2;
                // await ref.inc("balance", settings.ppr);
                message.send(`–ë–ª–∞–≥–æ–¥–∞—Ä—é, —á—Ç–æ –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º <a href="tg://user?id=${ref.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</a> –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å!`, {
                    parse_mode: "HTML"
                });
            }
        }

        if (typeof (message.text.split("/start ")[1]) === "string") {
            let link = await Ref.findOne({name: message.text.split("/start ")[1]});

            if (link) {
                if (!link.refs.find((x) => x === message.from.id)) {
                    link.refs.push(message.from.id);
                    await link.save();
                }
            }
        }

        let user = new User(schema);
        await user.save();

        return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. ‚§µÔ∏è`, {
            reply_markup: {
                keyboard: $menu,
                resize_keyboard: true
            }
        });
    });

    message.user = await User.findOne({id: message.from.id});
    if (!message.user.captcha && !message.text.startsWith("/start")) {
        message.send("ü§ñ –í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É!", {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–Ø –±–æ—Ç', callback_data: 'yabot' }, { text: '–Ø –Ω–µ –±–æ—Ç', callback_data: 'yanebot' }]
                ]
            }
        });
        return;
    }
    let { status } = await bot.getChatMember("@TGPP_INFO", message.from.id);
    if(status === 'left') return message.send(`‚ûï <b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã</b> –Ω–∞—á–∞—Ç—å/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, <b>–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º</b> –Ω–∞ –∫–∞–Ω–∞–ª https://t.me/TGPP_INFO`, {
        parse_mode: 'HTML',
        // reply_markup: {
        // inline_keyboard: [
        // 	[{ text: '‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: '@TGPP_INFO' }]
        // ]
        // }
    });

    if (message.text === "‚õîÔ∏è –û—Ç–º–µ–Ω–∞" || message.text === "üîô –ù–∞—á–∞–ª–æ") {
        await message.user.set("menu", "");
        await message.user.set("adminmenu", "");

        return message.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`, {
            reply_markup: {
                keyboard: $menu,
                resize_keyboard: true
            }
        });
    }
    /*‚ùóÔ∏è–í–∞–∂–Ω–æ‚ùóÔ∏è–í –Ω–∞—à–µ–º –±–æ—Ç–µ –Ω–µ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –∏ –æ–±–º–∞–Ω—â–∏–∫–æ–≤
    –ú–µ—Ç–∫–∞ "SCAM" - —ç—Ç–æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–∏—Ç–∏–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞    –æ–≥–¥–∞ –¥–∞–¥—É—Ç —Å–∫–∞–º - –¥–æ–±–∞–≤–∏—Ç—å
    üóÇ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:
    https://telegra.ph/Instrukciya-08-09-2*/
    if (message.text) if (message.text.startsWith("/start")) {
        await message.send(`‚ö†Ô∏è–í—ã–ø–ª–∞—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏: @TGPP_INFO
‚ôªÔ∏è–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: @${config.mainAdmin}
üí¨–ù–∞—à —á–∞—Ç: https://t.me/TGPP_CHAT`);
        message.send("–ú–µ–Ω—é ‚§µ", {
            reply_markup: {
                keyboard: $menu,
                resize_keyboard: true
            }
        });
    }

    if (message.user && message.user.menu) {
        if (message.user.menu.startsWith("enterAmount")) {
            message.text = Math.floor(Number(message.text));
            if (!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞`);

            let wallet = Number(message.user.menu.split("enterAmount")[1]);
            if (!wallet) return message.send('–û—à–∏–±–∫–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.');

            if (message.text > message.user.balance) return message.send(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.balance.toFixed(2)} RUB`);
            else if (message.text <= message.user.balance) {
                let ticket = new Ticket({
                    owner: message.from.id,
                    wallet: wallet,
                    amount: message.text
                });

                await message.user.dec("balance", message.text);
                await ticket.save();

                await message.user.set("menu", "");
                admins.forEach(function (admin) {
                    bot.sendMessage(admin, "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!").catch(e => {
                        console.log(e)
                    });
                });
                return message.send(`–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: 2 –Ω–µ–¥–µ–ª–∏`, {
                    reply_markup: {
                        keyboard: keyboards.main,
                        resize_keyboard: true
                    }
                });
            }
        }

        if (message.user.menu === "qiwi") {
            message.text = Math.floor(Number(message.text));
            if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI.');

            if (message.text < 70000000000) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI!`);

            await message.user.set("menu", "enterAmount" + message.text);
            return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥.`);
        }

        if (message.user.menu === "enterCountChannel") {
            message.text = Math.floor(Number(message.text));
            if (!message.text) return message.send(`–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`);

            if (message.text < 10) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);
            let cost = message.text * (settings.pps);

            if (cost > message.user.balance) return message.send(messages.pr.sub_err_nomoney, {});
            else if (cost <= message.user.balance) {
                await message.user.dec("balance", cost);
                await message.user.set("menu", "");

                let channel = new Channel({
                    owner: message.from.id,
                    username: message.user.prfUser,
                    completed: [],
                    count: message.text
                });

                await channel.save();
                await bot.sendMessage("@TGPP_INFO", "üöÄ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ "+message.text+" –ø–æ–¥–ø–∏—Å–æ–∫", {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞', url: 'https://t.me/TGPP_tgBOT' }]
                        ]
                    }
                });

                return message.send(messages.pr.sub_success, {
                    reply_markup: {
                        keyboard: keyboards.main,
                        resize_keyboard: true
                    }
                });

            }
        }

        if (message.user.menu === "enterCountViews") {
            message.text = Math.floor(Number(message.text));
            if (!message.text) return message.send(`–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.`);

            if (message.text < 10) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
            let cost = message.text * (settings.ppv);

            if (cost > message.user.balance) return message.send(messages.pr.view_err_nomoney);
            else if (cost <= message.user.balance) {
                await message.user.dec("balance", cost);
                await message.user.set("menu", "");

                let post = new Post({
                    owner: message.from.id,
                    id: message.user.prp.id,
                    post_id: message.user.prp.post_id,
                    completed: [],
                    count: message.text
                });

                await post.save();
                await bot.sendMessage("@TGPP_INFO", "üöÄ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ "+message.text+" –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞', url: 'https://t.me/TGPP_tgBOT' }]
                        ]
                    }
                });
                return message.send(messages.pr.view_success, {
                    reply_markup: {
                        keyboard: keyboards.main,
                        resize_keyboard: true
                    }
                });
            }
        }

        if (message.user.menu === "forwardpost") {
            if (!message.forward_from_chat) return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞!`, {reply_markup: {
                    keyboard: keyboards.cancel,
                    resize_keyboard: true
                }});

            await message.send(messages.pr.view_confirm);
            message.forward_from_chat.post_id = message.message_id;

            await message.user.set("prp", message.forward_from_chat);
            await message.user.set("menu", "enterCountViews");
        }

        if (message.user.menu === "forwardsub") {
            if (!message.forward_from_chat) return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞!`, {reply_markup: {
                    keyboard: keyboards.cancel,
                    resize_keyboard: true
                }});
            if (!message.forward_from_chat.username) return message.send(`–û—à–∏–±–∫–∞! –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º (–∏–º–µ—Ç—å Username)`);

            bot.getChatMember(`@${message.forward_from_chat.username}`, message.user.id).then(async (res) => {
                await message.send(messages.pr.sub_confirm);

                await message.user.set("menu", "enterCountChannel");
                await message.user.set("prfUser", message.forward_from_chat.username);
            }).catch((err) => {
                if (err.response.body.description === "Bad Request: CHAT_ADMIN_REQUIRED") return message.send(messages.pr.sub_err_noadmin);
                return message.send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
            });
        }
    }

    if (message.text) {
        if (message.text === "üöÄ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å") {
            message.send(messages.earn_select, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [{text: `‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è +${settings.pps_user}‚ÇΩ`, callback_data: 'subscribe'}],
                        [{text: `üëÅ‚Äçüó® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å +${settings.ppv_user}‚ÇΩ`, callback_data: 'watchpost'}],
                        [{text: `üöÄ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å +${settings.ppr}‚ÇΩ`, callback_data: 'referral'}]
                    ]
                }
            });
            return;
        }

        if (message.text === "üì£ –†–∞—Å–∫—Ä—É—Ç–∏—Ç—å") {
            return message.send(`–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [{text: '‚ûï –†–∞—Å–∫—Ä—É—Ç–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data: 'orderSub'}],
                        [{text: 'üëÅ‚Äçüó® –†–∞—Å–∫—Ä—É—Ç–∏—Ç—å –ø–æ—Å—Ç', callback_data: 'orderViews'}],
                        [{text: 'üìß –ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'orderMailing'}],
                        [{text: 'üîñ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'myOrders'}]
                    ]
                }
            });
        }

        if (message.text === "üì± –ë–∞–ª–∞–Ω—Å") {
            return message.send(`<b>üì± –ë–∞–ª–∞–Ω—Å</b>
üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.balance.toFixed(2)}‚ÇΩ`, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [{text: "üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data: "uwithdraw"}],
                        [{text: "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: "popolnit"}]
                    ]
                }
            });
        }

        if (message.text === "üîó –ü–∞—Ä—Ç—ë—Ä–∞–º") {
            let yesterday = Date.now() - 86400000;
            let twodays = Date.now() - (86400000 * 2);

            let lvl1 = await User.countDocuments({ref: message.chat.id});
            let lvl1_today = await User.countDocuments({
                ref: message.chat.id,
                regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`
            });
            let lvl1_yesterday = await User.countDocuments({
                ref: message.chat.id,
                regDate: `${new Date(yesterday).getDate()}.${new Date(yesterday).getMonth() + 1}.${new Date(yesterday).getFullYear()}`
            });
            let lvl1_twodays = await User.countDocuments({
                ref: message.chat.id,
                regDate: `${new Date(twodays).getDate()}.${new Date(twodays).getMonth() + 1}.${new Date(twodays).getFullYear()}`
            });

            return message.send(`üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•

üí∏ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É

üë§ –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:

1 —É—Ä–æ–≤–µ–Ω—å - ${lvl1} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ - ${(lvl1 * settings.ppr).toFixed(1)}‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ

üîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/${me.username}?start=${message.chat.id}

üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:

${settings.ppr.toFixed(2)} ‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
20% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
10% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π`, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [{text: "üîù –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data: "reftop"}]
                    ]
                }
            });
        }

        if (message.text === "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
            let counters = {}
            let yesterday = Date.now() - 86400000;
            let twodays = Date.now() - (86400000 * 2);

            counters = {
                users: await User.countDocuments(),
                users_today: await User.countDocuments({regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`}),
                users_yesterday: await User.countDocuments({regDate: `${new Date(Date.now() - (86400000)).getDate()}.${new Date(Date.now() - (86400000)).getMonth() + 1}.${new Date(Date.now() - (86400000)).getFullYear()}`}),
                users_twodays: await User.countDocuments({regDate: `${new Date(Date.now() - (86400000 * 2)).getDate()}.${new Date(Date.now() - (86400000 * 2)).getMonth() + 1}.${new Date(Date.now() - (86400000 * 2)).getFullYear()}`}),
                total: 0,
                channels: await Channel.countDocuments(),
                posts: await Post.countDocuments(),
                out
            }

            counters.total = counters.users_today + counters.users_yesterday + counters.users_twodays;

            return message.send(`<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üï¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: <b>${counters.users}</b>
üï¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: <b>${counters.users_today}</b>
üï¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—á–µ—Ä–∞: <b>${counters.users_yesterday}</b>
üï¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∑–∞–≤—á–µ—Ä–∞: <b>${counters.users_twodays}</b>
üï¥ –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ —Ç—Ä–∏ –¥–Ω—è: <b>${counters.total}</b>
üì¢ –ö–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: <b>${counters.channels}</b>
üìÇ –ü–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: <b>${counters.posts}</b>
üì§ –í—ã–ø–ª–∞—á–µ–Ω–æ: <b>${counters.out}‚ÇΩ</b>`, {
                parse_mode: "HTML"
            });
        }

        if (message.text === "üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥") {
            return message.send(moreMoney, {
                parse_mode: "HTML"
            });
        }

        if (message.text === "üí¨ –ß–∞—Ç") {
            return message.send(`–ü—Ä–∏–≤–µ—Ç, –∑–∞—Ö–æ–¥–∏ –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π —á–∞—Ç–∏–∫, –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!`, {
                reply_markup: {
                    inline_keyboard: [
                        [{text: "üí¨ –ß–∞—Ç", url: "https://t.me/TGPP_CHAT"}],
                        [{text: "üëÅ‚Äçüó® –ö–∞–Ω–∞–ª —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏", url: 'https://t.me/TGPP_INFO'}],
                        [{text: "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url: 'https://t.me/'+config.mainAdmin}]
                    ]
                }
            });
        }


        if (message.text === "üìÇ –ü—Ä–∞–≤–∏–ª–∞") {
            return message.send(`üî¥ –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
‚ñ™Ô∏è –û–±—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º —Å–µ—Ä–≤–∏—Å–∞:

‚ñ´Ô∏è 1. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑—É–µ—Ç—Å—è:
‚ñ´Ô∏è 1.1. –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞(–æ–≤) –º–∏–Ω–∏–º—É–º 10 –¥–Ω–µ–π.
‚ñ´Ô∏è 1.2. –í—Å–µ —Ä–∞–±–æ—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—è–∑—É—é—Ç—Å—è –∏–º–µ—Ç—å —Ñ–æ—Ç–æ –∏ @username.
‚ñ´Ô∏è 1.3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏–º–µ—Ç—å –Ω–µ–≤–Ω—è—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º, –ø—Ä–∏–º–µ—Ä: @sdofhzsdfj
‚ñ´Ô∏è 1.4. –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –≤–æ –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì!

‚ñ´Ô∏è 1.5 –ú–æ–∂–Ω–æ –∑–∞–≤–æ–¥–∏—Ç—å –¥–æ 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –±–æ—Ç–µ (–≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–∂–Ω–æ —Å 2 –∞–∫–∞—É–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å)

‚ñ´Ô∏è 1.6 –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!

üî∫ –í —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–æ–≤ 1.2/1.3/1.5 –±–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª—è–µ—Ç—Å—è.
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
‚ñ™Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞:

‚ñ´Ô∏è 1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É—é—Ç –∏–ª–∏ —Å–≤—è–∑–∞–Ω—ã —Å: –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏–µ–π/–Ω–∞—Å–∏–ª–∏–µ–º/—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–æ–º/–Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏.
 ‚ñ´Ô∏è 1.1. –í —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å username –∫–∞–Ω–∞–ª–∞ –∏ —É–¥–∞–ª—è—Ç—å –±–æ—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –∏/–∏–ª–∏ –º–µ–Ω—è—Ç—å –µ–≥–æ –ø—Ä–∞–≤–∞.

‚ñ´Ô∏è 1.5. –ü–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è!

üî∫ –í —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ 1/1.1/ –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Å —Ä–∞—Å–∫—Ä—É—Ç–∫–∏.
–ü–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã–≤–æ–¥—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç.`);
        }
    }

    if (admins.indexOf(message.from.id) !== -1) {
        if (message.text) if (message.text.startsWith('/createlink')) {
            let link = new Ref({
                name: message.text.split("/createlink ")[1],
                refs: []
            });

            await link.save();
            return message.send('–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.');
        }

        if (message.user.menu.startsWith("setBalance")) {
            message.text = Number(message.text);
            if (!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.`);

            let user = await User.findOne({id: Number(message.user.menu.split("setBalance")[1])});
            if (!user) return;

            await user.set("balance", message.text);
            await message.user.set("menu", "");

            return message.send(`–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.`, {
                reply_markup: {
                    keyboard: keyboards.admin,
                    resize_keyboard: true
                }
            });
        }

        if (message.user.menu === "enterIdBalance") {
            message.text = Math.floor(Number(message.text));
            if (!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

            let user = await User.findOne({id: message.text});
            if (!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

            await message.user.set("menu", "setBalance" + message.text);
            return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.\n–ë–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: ${user.balance} RUB`);
        }

        if (message.user.menu.startsWith("auditory")) {
            let users = await User.find();
            let total = users.length * Number(message.user.menu.split("auditory")[1]);

            for (let i = 0; i < total; i++) {
                if (message.photo) {
                    let file_id = message.photo[message.photo.length - 1].file_id;
                    let params = {
                        caption: message.caption,
                        parse_mode: "HTML",
                        disable_web_page_preview: true
                    }

                    if (message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
                        let [msgText, label, url] = message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
                        params.reply_markup = {
                            inline_keyboard: [
                                [{text: label, url: url}]
                            ]
                        }

                        params.caption = params.caption.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, "");
                    }

                    bot.sendPhoto(users[i].id, file_id, params);
                }

                if (!message.photo) {
                    let params = {
                        parse_mode: "HTML",
                        disable_web_page_preview: true
                    }

                    if (message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
                        let [msgText, label, url] = message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
                        params.reply_markup = {
                            inline_keyboard: [
                                [{text: label, url: url}]
                            ]
                        }
                    }

                    bot.sendMessage(users[i].id, message.text.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, ""), params);
                }
            }

            await message.user.set("menu", "");
            await message.send("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", {
                reply_markup: {
                    keyboard: keyboards.admin,
                    resize_keyboard: true
                }
            });
        }

        if (message.user.menu === "selectAuditory") {
            await message.user.set("menu", "auditory" + Number(message.text));
            return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.

–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`, {
                reply_markup: {
                    keyboard: keyboards.cancel,
                    resize_keyboard: true
                }
            });
        }

        if (message.user.menu === "enterId") {
            message.text = Number(message.text);
            if (!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

            let user = await User.findOne({id: message.text});
            if (!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

            let refs = await User.find({ref: message.text});
            message.send(`<a href="tg://user?id=${message.text}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>:

–ë–∞–ª–∞–Ω—Å: ${user.balance} RUB
–ü—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${refs.length}`, {
                parse_mode: "HTML",
                reply_markup: {
                    keyboard: keyboards.admin,
                    resize_keyboard: true
                }
            });

            let text = ``;
            refs.slice(0, 25).map((x, i) => {
                text += `<a href="tg://user?id=${x.id}">–†–µ—Ñ–µ—Ä–∞–ª ‚Ññ${i}</a>\n`;
            });

            message.user.set("menu", "");
            return message.send(`–ï–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n${text}`, {
                parse_mode: "HTML"
            });
        }

        if (message.user.menu === "moreMoney") {
            require("fs").writeFileSync(__dirname+"/moreMoney.json", JSON.stringify(message.text));
            moreMoney = message.text;

            await message.user.set("menu", "");
            return message.send(`–£—Å–ø–µ—à–Ω–æ!`, {
                reply_markup: {
                    keyboard: keyboards.admin,
                    resize_keyboard: true
                }
            });
        }

        if (message.text === "üîó –°—Å—ã–ª–∫–∏") {
            let links = await Ref.find();
            if (links === []) return message.send(`–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegram.me/${me.username}?start=–ö–û–î`);

            return links.map((x) => {
                message.send(`üîó –°—Å—ã–ª–∫–∞: ${x.name}\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ —Å—Å—ã–ª–∫–µ: ${x.refs.length}`);
            });
        }

        if (message.user.menu === "ban") {
            message.text = Math.floor(Number(message.text));
            if (!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

            let ban = await Ban.findOne({id: message.text});
            if (ban) {
                await ban.remove();
                await message.user.set("menu", "");

                return message.send(`–ë–∞–Ω —Å–Ω—è—Ç.`);
            } else {
                let _ban = new Ban({
                    id: message.text
                });

                await _ban.save();
                await message.user.set("menu", "");

                return message.send(`–ë–∞–Ω –≤—ã–¥–∞–Ω.`);
            }
        }

        if (message.text === "‚õîÔ∏è –ë–∞–Ω") {
            await message.user.set("menu", "ban");
            return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
                reply_markup: {
                    keyboard: keyboards.cancel,
                    resize_keyboard: true
                }
            });
        }

        if (message.text === "üí∞ –ëo–ª—å—à–µ –¥–µ–Ω–µ–≥") {
            await message.user.set("menu", "moreMoney");
            return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥`, {
                reply_markup: {
                    keyboard: keyboards.cancel,
                    resize_keyboard: true
                }
            });
        }

        if (message.text === "üîì –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å") {
            await message.user.set("menu", "enterIdBalance");
            return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
                reply_markup: {
                    keyboard: keyboards.cancel,
                    resize_keyboard: true
                }
            });
        }

        if (message.text === "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
            await message.user.set("menu", "enterId");
            return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
                reply_markup: {
                    keyboard: keyboards.cancel,
                    resize_keyboard: true
                }
            });
        }

        if (message.text === "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥") {
            let tickets = await Ticket.find();
            await message.send(`–ó–∞—è–≤–∫–∏:`);

            return tickets.map((x) => {
                message.send(`<a href="tg://user?id=${x.owner}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> <code>${x.owner}</code>

–ö–æ—à–µ–ª—ë–∫: ${String(x.wallet)}
–°—É–º–º–∞: ${x.amount} RUB`, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: [
                            [{text: "üì§ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data: `withdraw${x.owner}`}],
                            [{text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å", callback_data: `declineback${x.owner}`}],
                            [{text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `decline${x.owner}`}]
                        ]
                    }
                });
            });
        }

        if (message.text === "üì¨ –†–∞—Å—Å—ã–ª–∫–∞") {
            await message.user.set("menu", "selectAuditory");
            return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é.

0.25	‚Äî	25%
0.50	‚Äî	50%
0.75	‚Äî	75%
1		‚Äî	100%`, {
                reply_markup: {
                    keyboard: [["0.25", "0.50"], ["0.75", "1"], ["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]],
                    resize_keyboard: true
                }
            });
        }

        if (message.text === "üîé –ú–æ–¥–µ—Ä–∞—Ü–∏—è") {
            return message.send('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?', {
                reply_markup: {
                    keyboard: [['–ü–æ—Å—Ç—ã', '–ö–∞–Ω–∞–ª—ã'], ['‚õîÔ∏è –û—Ç–º–µ–Ω–∞']],
                    resize_keyboard: true
                }
            });
        }

        if (message.text === "–ö–∞–Ω–∞–ª—ã") {
            let channels = await Channel.find();
            channels.map((x) => {
                message.send(`üì¢ –ö–∞–Ω–∞–ª: @${x.username}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${x.completed.length}/${x.count}
üíª –ó–∞–∫–∞–∑—á–∏–∫: <a href="tg://user?id=${x.owner}">–ó–∞–∫–∞–∑—á–∏–∫</a> <code>${x.owner}</code>`, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: [[
                            {text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: 'moderchannel_remove' + x.username},
                            {text: 'üì£ –ö–∞–Ω–∞–ª', url: 'https://t.me/' + x.username}
                        ]]
                    }
                });
            });
        }

        if (message.text === "–ü–æ—Å—Ç—ã") {
            let posts = await Post.find();
            let promises = [];

            await posts.map(async (x) => {
                promises.push(
                    await bot.forwardMessage(message.chat.id, x.owner, x.post_id),
                    await message.send(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${x.completed.length}/${x.count}
üíª –ó–∞–∫–∞–∑—á–∏–∫: <a href="tg://user?id=${x.owner}">–ó–∞–∫–∞–∑—á–∏–∫</a> <code>${x.owner}</code>`, {
                        parse_mode: "HTML",
                        reply_markup: {
                            inline_keyboard: [[
                                {text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: 'moderpost_remove' + x.post_id}
                            ]]
                        }
                    })
                );
            });

            await Promise.all(promises);
        }

        if (message.text === "/admin" || message.text === "‚ö°Ô∏è –ê–¥–º–∏–Ω–∫–∞") return message.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.`, {
            reply_markup: {
                keyboard: keyboards.admin,
                resize_keyboard: true
            }
        });
    }

    return message.send('—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? –Ω–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é');
});

bot.on("callback_query", async (query) => {
    const {message} = query;
    message.user = await User.findOne({id: message.chat.id});

    message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
    let me = await bot.getMe();

    let ban = await Ban.findOne({id: message.user.id});
    if (ban) return bot.answerCallbackQuery(query.id, "–ó–∞–±–∞–Ω–µ–Ω!!!");

    if (query.data.startsWith("yanebot")) {
        await bot.editMessageText("ü§î –õ–∞–¥–Ω–æ, –ø–æ–≤–µ—Ä—é —Ç–µ–±–µ", {
            chat_id: message.chat.id,
            message_id: message.message_id
        });
        await User.findOneAndUpdate({id: message.chat.id}, { captcha: 1 });
    }
    if (query.data.startsWith("yabot")) {
        await bot.editMessageText("ü§® –ò–¥–∏ —Å–≤–æ–µ–π –¥–æ—Ä–æ–≥–æ–π, –±–æ—Ç", {
            chat_id: message.chat.id,
            message_id: message.message_id
        });
        await User.findOneAndUpdate({id: message.chat.id}, { captcha: 0 });
    }
    if(query.data.startsWith("popolnit")){
        //${message.user.ref ? settings.refovod_balance*100+" % –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –≤–∞—Å –≤ –±–æ—Ç–∞
        // " : ""}
        await bot.editMessageText(`‚ñ™Ô∏è –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é üë§ –≤–∞–º
üíµ —Å—É–º–º—É –Ω–∞ QIWI üëõ –∫–æ—à–µ–ª—ë–∫‚ÄºÔ∏è
‚Üí‚Üí‚Üí \`+79276153863\` ‚Üê‚Üê‚Üê

‚ñ™Ô∏è –ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
‚úèÔ∏è –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π‚ÄºÔ∏è
‚Üí ‚Üí ‚Üí \`tgpp${message.chat.id}\` ‚Üê ‚Üê ‚Üê

–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è`,{
            chat_id: message.chat.id,
            message_id: message.message_id,
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [[
                    {text: '–ó–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞', callback_data: 'checkPayment'}
                ]]
            }
        });
    }
    if (query.data.startsWith("checkPayment")) {
        Wallet.getOperationHistory({rows: 50, operation: "IN"}, (err, operations) => {
            if(err){
                console.log(err);
                return;
            }
            let found = 0;
            operations.data.forEach((transaction)=>{
                if (transaction.comment === "tgpp"+message.chat.id){
                    found = 1;
                    let transactions = JSON.parse(fs.readFileSync(__dirname+"/transactions.json").toString());
                    if (!transactions.includes(transaction.trmTxnId)) {
                        // console.log(transaction.sum.amount);
                        // console.log(transaction);
                        transactions.push(transaction.trmTxnId);
                        fs.writeFileSync(__dirname+"/transactions.json", JSON.stringify(transactions));

                        User.findOne({id: message.chat.id}).then(async (user) => {
                            if (user.ref) {
                                User.findOne({id: user.ref}).then(async (refovod) => {
                                    await refovod.inc("balance", transaction.sum.amount * settings.refovod_balance);
                                    bot.sendMessage(refovod.id, `üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${(transaction.sum.amount * settings.refovod_balance).toFixed(2)} —Ä—É–±–ª–µ–π –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –í–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª`, {parse_mode: "HTML"}).catch();
                                });
                                await user.inc("balance", transaction.sum.amount*(1-settings.refovod_balance));
                                bot.editMessageText("üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ "+transaction.sum.amount/**(1-settings.refovod_balance)*/+" RUB", {
                                    chat_id: message.chat.id,
                                    message_id: message.message_id
                                });
                            }else{
                                await user.inc("balance", transaction.sum.amount);
                                bot.editMessageText("üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ "+transaction.sum.amount+" RUB", {
                                    chat_id: message.chat.id,
                                    message_id: message.message_id
                                });
                            }
                        });
                    }else{
                        bot.editMessageText("‚ùå –ü–µ—Ä–µ–≤–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", {
                            chat_id: message.chat.id,
                            message_id: message.message_id
                        });
                    }
                }
            });
            if(!found){
                bot.editMessageText("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", {
                    chat_id: message.chat.id,
                    message_id: message.message_id
                });
            }
            // console.log(operations.data[operations.data.length-1].sum.amount);
            // console.log(operations.data[operations.data.length-1].comment);
        })
    }
    if (query.data.startsWith("subcheck-")) {
        let username = query.data.split("subcheck-")[1];
        let channel = await Channel.findOne({username: username});

        if (!channel) return;
        if (channel.completed.find((x) => x.id === message.user.id)) return;

        bot.getChatMember(`@${channel.username}`, message.user.id).then(async (res) => {
            if (res.status === "left") return bot.answerCallbackQuery(query.id, "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!");
            bot.editMessageText(messages.sub_end, {
                chat_id: message.chat.id,
                message_id: message.message_id
            });

            await message.user.inc("balance", settings.pps_user);

            if(message.user.ref){
                User.findOne({id: message.user.ref}).then(async (refovod) => {
                    await refovod.inc("balance", settings.refovod_podpiska);
                    if(message.user.refPayed === 2){
                        message.user.set("refPayed", 1);
                        await refovod.inc("balance", settings.ppr);
                        bot.sendMessage(refovod.id, `üí≥ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${settings.ppr*100} –∫–æ–ø–µ–µ–∫ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é <a href=\"tg://user?id=${ref.id}\">—Ä–µ—Ñ–µ—Ä–∞–ª–∞</a> –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ!`, {
                            parse_mode: "HTML"
                        });
                    }
                });
            }

            channel.completed.push({
                id: message.user.id,
                time: Date.now(),
                unfollow: false
            });

            await channel.save();

            if (channel.completed.length >= channel.count) {
                await bot.sendMessage(channel.owner, `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @${channel.username} –∑–∞–≤–µ—Ä—à—ë–Ω!`);
                await channel.remove();
            }

            let ref1st = await User.findOne({ref: message.user.id});
            if (ref1st) {
                await ref1st.inc("balance", settings.pps * settings.ref1st);
            }
        }).catch(async (err) => {
            if (err.response.body.description === "Bad Request: CHAT_ADMIN_REQUIRED") {
                bot.editMessageText("–ó–∞–∫–∞–∑—á–∏–∫ —É–±—Ä–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.", {
                    chat_id: message.chat.id,
                    message_id: message.message_id
                });

                bot.sendMessage(channel.owner, "–í—ã —É–±—Ä–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ —É –±–æ—Ç–∞. –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω.");
                await channel.remove();
            }
        });
    }

    if (query.data.startsWith("reftop")){
        let refs = [];
        let users = await User.find({ref: {$gt: 0}});//.where('ref').not.exec();

        users.forEach(function(user) {
            let found = false;
            refs.forEach(ref=>{
                if (ref.id === user.ref) {
                    found = true;
                }
            });
            if (!found) {
                refs.push({
                    id: user.ref,
                    refs: 0
                });
            }
            refs.forEach(ref=>{
                if (ref.id === user.ref) ref.refs++;
            });
        });
        refs = refs.sort(function (a, b) {
            return b.refs - a.refs
        });
        let text = "üîù –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤\n\n";
        refs.forEach(function(ref, i){
            let emodzi = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"];
            if(i < 10){
                text += `${emodzi[i]} ${ref.refs} —á–µ–ª–æ–≤–µ–∫ - <a href="tg://user?id=${ref.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>
`;
            }
        });


        bot.editMessageText(text, {
            chat_id: message.chat.id,
            message_id: message.message_id,
            parse_mode: "HTML"
        });
    }

    if (query.data.startsWith("skipChannel")) {
        let username = query.data.split("skipChannel-");
        let channel = await Channel.findOne({username: username});

        if (!channel) return;
        channel.completed.push({id: message.user.id, time: Date.now(), unfollow: true});

        await channel.save();
        return bot.editMessageText(`–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.`, {
            chat_id: message.chat.id,
            message_id: message.message_id
        });
    }

    if (admins.indexOf(message.user.id) !== -1) {
        if (query.data.startsWith("sponsorGive")) {
            let id = Number(query.data.split("sponsorGive")[1]);
            let user = await User.findOne({id: id});

            await user.inc("balance", 2);
            bot.sendMessage(id, `‚úÖ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ 2 —Ä—É–±–ª—è –Ω–∞ –±–∞–ª–∞–Ω—Å.`);

            let completed = new Youtube({id: id});
            await completed.save();

            return bot.answerCallbackQuery(query.id, "–ì–æ—Ç–æ–≤–æ.");
        }

        if (query.data.startsWith("sponsorDeny")) {
            let id = Number(query.data.split("sponsorDeny")[1]);
            bot.sendMessage(id, `‚ùå –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ!`);

            return bot.answerCallbackQuery(query.id, "–ì–æ—Ç–æ–≤–æ.");
        }

        if (query.data.startsWith("withdraw")) {
            let id = Number(query.data.split("withdraw")[1]);
            let ticket = await Ticket.findOne({owner: id});

            if (!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

            //out = out + Math.floor(ticket.amount);//–¥–ª—è –æ–±–º–∞–Ω–∞ –≤ –≤—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–º–Ω–æ–∂–µ–Ω–∏–µ
            require("fs").writeFileSync(__dirname+"/outMoney.json", out + Math.floor(ticket.amount));
            out += Math.floor(ticket.amount);
            await bot.sendMessage(ticket.owner, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!

üí∏ ${ticket.amount} —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞ –∫–æ—à–µ–ª—ë–∫ ${ticket.wallet}!

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º) –≤ –Ω–∞—à üí¨ –ß–∞—Ç  https://t.me/TGPP_CHAT`).catch();
            await ticket.remove();
            await bot.sendMessage("@TGPP_INFO", `–í—ã–ø–ª–∞—á–µ–Ω–æ ${ticket.amount} RUB <a href="tg://user?id=${ticket.owner}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>!
#–≤—ã–≤–æ–¥`, {
                parse_mode: "HTML"
            } );
            bot.editMessageText("–î–µ–Ω—å–≥–∏ –≤—ã–ø–ª–∞—á–µ–Ω—ã.", {
                chat_id: message.chat.id,
                message_id: message.message_id
            });

            return;
        }

        if (query.data.startsWith("declineback")) {
            let id = Number(query.data.split("declineback")[1]);
            let ticket = await Ticket.findOne({owner: id});

            if (!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

            await bot.sendMessage(ticket.owner, "–í–∞–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏.");
            await User.findOne({id: id}).then(async (user) => await user.inc("balance", ticket.amount));

            await ticket.remove();
            await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.");
        }

        if (query.data.startsWith("decline")) {
            let id = Number(query.data.split("decline")[1]);
            let ticket = await Ticket.findOne({owner: id});

            if (!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

            await ticket.remove();
            await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤.");
        }

        if (query.data.startsWith("moderchannel_remove")) {
            let username = query.data.split("moderchannel_remove")[1];
            let channel = await Channel.findOne({username});

            if (!channel) return bot.sendMessage(message.chat.id, '–û—à–∏–±–∫–∞.');

            bot.sendMessage(channel.owner, 'üö´ –í–∞—à –∑–∞–∫–∞–∑ (–ö–∞–Ω–∞–ª) –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.');
            await channel.remove();

            return bot.editMessageText('üö´ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!', {
                message_id: message.message_id,
                chat_id: message.chat.id
            });
        }

        if (query.data.startsWith("moderpost_remove")) {
            let post_id = query.data.split("moderpost_remove")[1];
            let post = await Post.findOne({post_id});

            if (!post) return bot.sendMessage(message.chat.id, '–û—à–∏–±–∫–∞.');

            bot.sendMessage(post.owner, 'üö´ –í–∞—à –∑–∞–∫–∞–∑ (–ü—Ä–æ—Å–º–æ—Ç—Ä—ã) –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.');
            await post.remove();

            return bot.editMessageText('üö´ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!', {
                message_id: message.message_id,
                chat_id: message.chat.id
            });
        }
    }

    if (query.data === "subscribe") {
        bot.deleteMessage(message.chat.id, message.message_id);

        let channels = await Channel.find();
        channels = channels.filter((x) => !x.completed.find((x) => x.id === message.chat.id));

        if (!channels[0]) return message.send(messages.sub_no);

        let channel = channels[Math.floor(Math.random() * channels.length)];
        return message.send(messages.sub_request, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [{text: `‚ûï –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é`, url: `https://t.me/${channel.username}`}],
                    [{text: `‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É`, callback_data: `subcheck-${channel.username}`}],
                    [{text: "‚úñÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: `skipChannel-${channel.username}`}]
                ]
            }
        });
    }

    if (query.data === "watchpost") {
        bot.deleteMessage(message.chat.id, message.message_id);

        let posts = await Post.find();
        posts = posts.filter((x) => x.completed.indexOf(message.chat.id) === -1);

        if (!posts[0]) return message.send(messages.view_no);
        posts = [posts[0]];

        for (let i = 0; i < posts.length; i++) {
            setTimeout(async () => {
                message.send(messages.view_request, {
                    reply_markup: {
                        keyboard: [[]]
                    }
                });

                bot.forwardMessage(message.chat.id, posts[i].owner, posts[i].post_id);

                setTimeout(async () => {
                    message.send(messages.view_end, {
                        keyboard: $menu,
                        resize_keyboard: true
                    });

                    posts[i].completed.push(message.chat.id);
                    await posts[i].save();

                    if (posts[i].completed.length >= posts[i].count) {
                        await bot.sendMessage(posts[i].owner, '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!');
                        await posts[i].remove();
                    }

                    await message.user.inc("balance", settings.ppv_user);
                }, 2500);
            }, i * 3000);
        }
    }

    if (query.data === "referral") {
        bot.deleteMessage(message.chat.id, message.message_id);
        let yesterday = Date.now() - 86400000;
        let twodays = Date.now() - (86400000 * 2);

        let lvl1 = await User.countDocuments({ref: message.chat.id});
        let lvl1_today = await User.countDocuments({
            ref: message.chat.id,
            regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`
        });
        let lvl1_yesterday = await User.countDocuments({
            ref: message.chat.id,
            regDate: `${new Date(yesterday).getDate()}.${new Date(yesterday).getMonth() + 1}.${new Date(yesterday).getFullYear()}`
        });
        let lvl1_twodays = await User.countDocuments({
            ref: message.chat.id,
            regDate: `${new Date(twodays).getDate()}.${new Date(twodays).getMonth() + 1}.${new Date(twodays).getFullYear()}`
        });

        return message.send(`üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•

üí∏ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –ø–µ—Ä–≤–æ–≥–æ –±–æ–Ω—É—Å–∞

üë§ –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:

1 —É—Ä–æ–≤–µ–Ω—å - ${lvl1} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ - ${(lvl1 * settings.ppr).toFixed(1)}‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ

üîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/${me.username}?start=${message.chat.id}

üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:

${settings.ppr.toFixed(2)} ‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
20% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
10% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π`, {
            parse_mode: "HTML"
        });
    }

    if (query.data === "bonus") {
        bot.editMessageText(`üöÄ –ë–æ–Ω—É—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π –æ—Ç ${settings.ppr}‚ÇΩ –∑–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!`, {
            reply_markup: {
                inline_keyboard: [[{text: 'üöÄ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: "referral"}]]
            },
            chat_id: message.chat.id,
            message_id: message.message_id
        });
    }

    if (query.data === "uwithdraw") {
        bot.deleteMessage(message.chat.id, message.message_id);
        if (message.user.balance < settings.min_withdraw) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${settings.min_withdraw}‚ÇΩ`, {
            reply_markup: {
                keyboard: keyboards.main,
                resize_keyboard: true
            }
        });

        message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI.`, {
            reply_markup: {
                keyboard: keyboards.cancel,
                resize_keyboard: true
            }
        });

        await message.user.set("menu", "qiwi");
    }

    if (query.data === "orderSub") {
        bot.deleteMessage(message.chat.id, message.message_id);

        await message.user.set("menu", "forwardsub");
        return message.send(`üì¢ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –í–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∫—Ä—É—Ç–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –í–∞—à –∫–∞–Ω–∞–ª

üë§ 1 –ø–æ–¥–ø–∏—Å—á–∏–∫ - ${settings.pps}‚ÇΩ
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å - ${message.user.balance.toFixed(2)}‚ÇΩ
üìä –ï–≥–æ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ ${(message.user.balance.toFixed(0)/settings.pps).toFixed(0)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

<b>–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É!</b>

‚ùóÔ∏è –ù–∞—à –±–æ—Ç @TGPP_tgBOT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞`, {
            parse_mode: "HTML",
            reply_markup: {
                keyboard: keyboards.cancel,
                resize_keyboard: true
            }
        });
    }

    if (query.data === "orderViews") {
        bot.deleteMessage(message.chat.id, message.message_id);

        await message.user.set("menu", "forwardpost");
        return message.send(`üì¢ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –í–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—É—Ç–∫—É –í–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞

üë§ 1 –ø—Ä–æ—Å–º–æ—Ç—Ä - ${settings.ppv}‚ÇΩ
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å - ${message.user.balance.toFixed(2)}‚ÇΩ
üìä –ï–≥–æ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ ${(message.user.balance.toFixed(0) / settings.ppv).toFixed(0)} –ø–æ—Å–º–æ—Ç—Ä–æ–≤

<b>–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É!</b>
`, {
            parse_mode: "HTML",
            reply_markup: {
                keyboard: keyboards.cancel,
                resize_keyboard: true
            }
        });
    }

    if (query.data === "orderMailing") {
        bot.deleteMessage(message.chat.id, message.message_id);

        let users = await User.countDocuments();
        let cost = users * 0.01;

        return message.send(`üí´ –í–∞–º –Ω—É–∂–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–¥–∞—á–∞? –¢–æ–≥–¥–∞ –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É ‚úâÔ∏è –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ ü§ñ –±–æ—Ç–∞.

üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${users}</b>

üí∏ –¶–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: <b>${cost.toFixed(2)}</b>‚ÇΩ

<b>–ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:</b> @${config.mainAdmin}`, {
            parse_mode: "HTML"
        });
    }

    if (query.data === "myOrders") {
        bot.deleteMessage(message.chat.id, message.message_id);

        let channels = await Channel.find({owner: message.chat.id});
        if (!channels[0]) return message.send(`–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤! ‚ùå`);

        let text = ``;

        channels.map((x) => {
            text += `üì¢ –ö–∞–Ω–∞–ª: @${x.username}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${x.completed.length}/${x.count}\n\n`;
        });

        return message.send(`–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:

${text}`);
    }

    if (query.data === "moreMoney") {
        bot.deleteMessage(message.chat.id, message.message_id);

        return message.send(`–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, –≤–∞—à —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.

–¶–µ–Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: <b>100‚ÇΩ</b>

–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –Ω–µ –º–µ–Ω–µ–µ <b>500</b> –ª—é–¥—è–º, –∏ –Ω–µ –±–æ–ª–µ–µ <b>5000</b> –ª—é–¥–µ–π.

<b>–ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:</b> @${config.mainAdmin}`, {
            parse_mode: "HTML"
        });
    }
});

User.prototype.inc = function (field, value = 1) {
    this[field] += value;
    return this.save();
}

User.prototype.dec = function (field, value = 1) {
    this[field] -= value;
    return this.save();
}

User.prototype.set = function (field, value) {
    this[field] = value;
    return this.save();
}
